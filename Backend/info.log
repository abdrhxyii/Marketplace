{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"error":{},"level":"error","message":"There was an error in Sequelize"}
{"error":{},"level":"error","message":"There was an error in Sequelize"}
{"error":{},"level":"error","message":"There was an error in Sequelize"}
{"error":{},"level":"error","message":"There was an error in Sequelize"}
{"error":{},"level":"error","message":"There was an error in Sequelize"}
{"error":{},"level":"error","message":"There was an error in Sequelize"}
{"error":{},"level":"error","message":"There was an error in Sequelize"}
{"error":{},"level":"error","message":"There was an error in Sequelize"}
{"error":{},"level":"error","message":"There was an error in Sequelize"}
{"error":{},"level":"error","message":"There was an error in Sequelize"}
{"error":{},"level":"error","message":"There was an error in Sequelize"}
{"error":{},"level":"error","message":"There was an error in Sequelize"}
{"error":{},"level":"error","message":"There was an error in Sequelize"}
{"error":{},"level":"error","message":"There was an error in Sequelize"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"error":{},"level":"error","message":"There was an error in Sequelize"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_DUP_FIELDNAME","errno":1060,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `CategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`), FOREIGN KEY (`CategoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Duplicate column name 'CategoryId'","sqlState":"42S21"},"parameters":{},"parent":{"code":"ER_DUP_FIELDNAME","errno":1060,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `CategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`), FOREIGN KEY (`CategoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Duplicate column name 'CategoryId'","sqlState":"42S21"},"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `CategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`), FOREIGN KEY (`CategoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"},"level":"error","message":"There was an error in Sequelize"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_DUP_FIELDNAME","errno":1060,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `CategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`), FOREIGN KEY (`CategoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Duplicate column name 'CategoryId'","sqlState":"42S21"},"parameters":{},"parent":{"code":"ER_DUP_FIELDNAME","errno":1060,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `CategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`), FOREIGN KEY (`CategoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Duplicate column name 'CategoryId'","sqlState":"42S21"},"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `CategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`), FOREIGN KEY (`CategoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"},"level":"error","message":"There was an error in Sequelize"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_DUP_FIELDNAME","errno":1060,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `CategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`), FOREIGN KEY (`CategoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Duplicate column name 'CategoryId'","sqlState":"42S21"},"parameters":{},"parent":{"code":"ER_DUP_FIELDNAME","errno":1060,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `CategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`), FOREIGN KEY (`CategoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Duplicate column name 'CategoryId'","sqlState":"42S21"},"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `CategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`), FOREIGN KEY (`CategoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"},"level":"error","message":"There was an error in Sequelize"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_DUP_FIELDNAME","errno":1060,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `CategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`), FOREIGN KEY (`CategoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Duplicate column name 'CategoryId'","sqlState":"42S21"},"parameters":{},"parent":{"code":"ER_DUP_FIELDNAME","errno":1060,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `CategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`), FOREIGN KEY (`CategoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Duplicate column name 'CategoryId'","sqlState":"42S21"},"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `CategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`), FOREIGN KEY (`CategoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"},"level":"error","message":"There was an error in Sequelize"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_DUP_FIELDNAME","errno":1060,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `CategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`), FOREIGN KEY (`CategoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Duplicate column name 'CategoryId'","sqlState":"42S21"},"parameters":{},"parent":{"code":"ER_DUP_FIELDNAME","errno":1060,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `CategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`), FOREIGN KEY (`CategoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Duplicate column name 'CategoryId'","sqlState":"42S21"},"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `CategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`), FOREIGN KEY (`CategoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"},"level":"error","message":"There was an error in Sequelize"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_DUP_FIELDNAME","errno":1060,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `CategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`), FOREIGN KEY (`CategoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Duplicate column name 'CategoryId'","sqlState":"42S21"},"parameters":{},"parent":{"code":"ER_DUP_FIELDNAME","errno":1060,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `CategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`), FOREIGN KEY (`CategoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Duplicate column name 'CategoryId'","sqlState":"42S21"},"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `CategoryId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`), FOREIGN KEY (`CategoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"},"level":"error","message":"There was an error in Sequelize"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4001"}
{"label":"server","level":"info","message":"Server running on port undefined"}
{"label":"server","level":"info","message":"Server running on port undefined"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Products`","sqlMessage":"Table 'marketplace_test_db.products' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Products`","sqlMessage":"Table 'marketplace_test_db.products' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Products`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Categories`","sqlMessage":"Table 'marketplace_test_db.categories' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Categories`","sqlMessage":"Table 'marketplace_test_db.categories' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Categories`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Categories`","sqlMessage":"Table 'marketplace_test_db.categories' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Categories`","sqlMessage":"Table 'marketplace_test_db.categories' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Categories`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Blogs`","sqlMessage":"Table 'marketplace_test_db.blogs' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Blogs`","sqlMessage":"Table 'marketplace_test_db.blogs' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Blogs`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Products`","sqlMessage":"Table 'marketplace_test_db.products' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Products`","sqlMessage":"Table 'marketplace_test_db.products' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Products`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"error":{},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Comments`","sqlMessage":"Table 'marketplace_test_db.comments' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Comments`","sqlMessage":"Table 'marketplace_test_db.comments' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Comments`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Products`","sqlMessage":"Table 'marketplace_test_db.products' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Products`","sqlMessage":"Table 'marketplace_test_db.products' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Products`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Categories`","sqlMessage":"Table 'marketplace_test_db.categories' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Categories`","sqlMessage":"Table 'marketplace_test_db.categories' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Categories`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'mmarahman4847@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Users`","sqlMessage":"Table 'marketplace_test_db.users' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Users`","sqlMessage":"Table 'marketplace_test_db.users' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Users`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'mmarahman4847@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Users`","sqlMessage":"Table 'marketplace_test_db.users' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Users`","sqlMessage":"Table 'marketplace_test_db.users' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Users`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'testuser@example.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'testuser@example.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'testuser@example.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'loginuser@example.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'loginuser@example.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'loginuser@example.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'loginuser@example.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'nonexistent@example.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Categories`","sqlMessage":"Table 'marketplace_test_db.categories' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Categories`","sqlMessage":"Table 'marketplace_test_db.categories' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Categories`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = '4';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Products`","sqlMessage":"Table 'marketplace_test_db.products' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Products`","sqlMessage":"Table 'marketplace_test_db.products' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Products`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = '5';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = '4';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Products`","sqlMessage":"Table 'marketplace_test_db.products' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Products`","sqlMessage":"Table 'marketplace_test_db.products' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Products`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = '5';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Products`","sqlMessage":"Table 'marketplace_test_db.products' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Products`","sqlMessage":"Table 'marketplace_test_db.products' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Products`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = '5';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_CATALOG AS constraintCatalog, CONSTRAINT_NAME AS constraintName, CONSTRAINT_SCHEMA AS constraintSchema, CONSTRAINT_TYPE AS constraintType, TABLE_NAME AS tableName, TABLE_SCHEMA AS tableSchema from INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE table_name='Comments' AND constraint_name = 'comments_ibfk_1' AND TABLE_SCHEMA = 'marketplace_test_db';"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Comments` DROP FOREIGN KEY `comments_ibfk_1`;"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = '5';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = '10';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Categories`","sqlMessage":"Table 'marketplace_test_db.categories' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Categories`","sqlMessage":"Table 'marketplace_test_db.categories' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Categories`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'nonexistent@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = '5';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = '10';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Products`","sqlMessage":"Table 'marketplace_test_db.products' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Products`","sqlMessage":"Table 'marketplace_test_db.products' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Products`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'nonexistent@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = '5';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = '10';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_FK_CANNOT_OPEN_PARENT","errno":1824,"sql":"CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Failed to open the referenced table 'blogs'","sqlState":"HY000"},"parameters":{},"parent":{"code":"ER_FK_CANNOT_OPEN_PARENT","errno":1824,"sql":"CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Failed to open the referenced table 'blogs'","sqlState":"HY000"},"sql":"CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Blogs`","sqlMessage":"Table 'marketplace_test_db.blogs' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Blogs`","sqlMessage":"Table 'marketplace_test_db.blogs' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Blogs`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Blogs`","sqlMessage":"Table 'marketplace_test_db.blogs' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Blogs`","sqlMessage":"Table 'marketplace_test_db.blogs' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Blogs`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_CATALOG AS constraintCatalog, CONSTRAINT_NAME AS constraintName, CONSTRAINT_SCHEMA AS constraintSchema, CONSTRAINT_TYPE AS constraintType, TABLE_NAME AS tableName, TABLE_SCHEMA AS tableSchema from INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE table_name='Comments' AND constraint_name = 'comments_ibfk_1' AND TABLE_SCHEMA = 'marketplace_test_db';"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Comments` DROP FOREIGN KEY `comments_ibfk_1`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"error":{},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_FK_CANNOT_OPEN_PARENT","errno":1824,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Failed to open the referenced table 'categories'","sqlState":"HY000"},"parameters":{},"parent":{"code":"ER_FK_CANNOT_OPEN_PARENT","errno":1824,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Failed to open the referenced table 'categories'","sqlState":"HY000"},"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_CATALOG AS constraintCatalog, CONSTRAINT_NAME AS constraintName, CONSTRAINT_SCHEMA AS constraintSchema, CONSTRAINT_TYPE AS constraintType, TABLE_NAME AS tableName, TABLE_SCHEMA AS tableSchema from INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE table_name='Comments' AND constraint_name = 'comments_ibfk_1' AND TABLE_SCHEMA = 'marketplace_test_db';"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Comments` DROP FOREIGN KEY `comments_ibfk_1`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Categories` (`id`,`name`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_FK_CANNOT_OPEN_PARENT","errno":1824,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Failed to open the referenced table 'categories'","sqlState":"HY000"},"parameters":{},"parent":{"code":"ER_FK_CANNOT_OPEN_PARENT","errno":1824,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Failed to open the referenced table 'categories'","sqlState":"HY000"},"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Categories` (`id`,`name`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Blogs`","sqlMessage":"Table 'marketplace_test_db.blogs' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Blogs`","sqlMessage":"Table 'marketplace_test_db.blogs' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Blogs`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Users`","sqlMessage":"Table 'marketplace_test_db.users' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Users`","sqlMessage":"Table 'marketplace_test_db.users' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Users`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Categories` (`id`,`name`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Products`","sqlMessage":"Table 'marketplace_test_db.products' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Products`","sqlMessage":"Table 'marketplace_test_db.products' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Products`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Categories`","sqlMessage":"Table 'marketplace_test_db.categories' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Categories`","sqlMessage":"Table 'marketplace_test_db.categories' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Categories`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Users`","sqlMessage":"Table 'marketplace_test_db.users' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Users`","sqlMessage":"Table 'marketplace_test_db.users' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Users`"},"level":"error","message":"There was an error in Sequelize"}
{"error":{},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Users`","sqlMessage":"Table 'marketplace_test_db.users' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Users`","sqlMessage":"Table 'marketplace_test_db.users' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Users`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_FK_CANNOT_OPEN_PARENT","errno":1824,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Failed to open the referenced table 'categories'","sqlState":"HY000"},"parameters":{},"parent":{"code":"ER_FK_CANNOT_OPEN_PARENT","errno":1824,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Failed to open the referenced table 'categories'","sqlState":"HY000"},"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'nonexistent@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = '6';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = '10';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Products`","sqlMessage":"Table 'marketplace_test_db.products' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Products`","sqlMessage":"Table 'marketplace_test_db.products' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Products`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_FK_CANNOT_OPEN_PARENT","errno":1824,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Failed to open the referenced table 'categories'","sqlState":"HY000"},"parameters":{},"parent":{"code":"ER_FK_CANNOT_OPEN_PARENT","errno":1824,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Failed to open the referenced table 'categories'","sqlState":"HY000"},"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_FK_CANNOT_OPEN_PARENT","errno":1824,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Failed to open the referenced table 'categories'","sqlState":"HY000"},"parameters":{},"parent":{"code":"ER_FK_CANNOT_OPEN_PARENT","errno":1824,"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Failed to open the referenced table 'categories'","sqlState":"HY000"},"sql":"CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Categories` (`id`,`name`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product` WHERE `Product`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product` WHERE `Product`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product` WHERE `Product`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product` WHERE `Product`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'mmarahman4847@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'mmarahman4847@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'mmarahman4847@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product` WHERE `Product`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product` WHERE `Product`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product` WHERE `Product`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product` WHERE `Product`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product` WHERE `Product`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product` WHERE `Product`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`name` = 'Perfumes';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Categories` (`id`,`name`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`name` = 'Cosmetics';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Categories` (`id`,`name`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`name` = 'Men\\'s shirts and pants';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Categories` (`id`,`name`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '2';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '2';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '2';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '2';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '2';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '2';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '3';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '3';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '3';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '3';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '3';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '3';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '3';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '3';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '3';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '3';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '3';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '3';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Products` (`id`,`image`,`name`,`description`,`price`,`categoryId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product` WHERE `Product`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product` WHERE `Product`.`id` = '1';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '2';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product` WHERE `Product`.`categoryId` = '2';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '2';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product` WHERE `Product`.`categoryId` = '2';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '3';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product` WHERE `Product`.`categoryId` = '3';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '2';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product` WHERE `Product`.`categoryId` = '2';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '2';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product` WHERE `Product`.`categoryId` = '2';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '2';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product` WHERE `Product`.`categoryId` = '2';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category` WHERE `Category`.`id` = '3';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product` WHERE `Product`.`categoryId` = '3';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `name`, `createdAt`, `updatedAt` FROM `Categories` AS `Category`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `image`, `name`, `description`, `price`, `categoryId`, `createdAt`, `updatedAt` FROM `Products` AS `Product`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW FULL COLUMNS FROM `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Users` ADD `verificationToken` VARCHAR(255) NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Users` CHANGE `email` `email` VARCHAR(255) NOT NULL UNIQUE;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Users` CHANGE `password` `password` VARCHAR(255) NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Users` CHANGE `first_name` `first_name` VARCHAR(255);"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Users` CHANGE `last_name` `last_name` VARCHAR(255);"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Users` CHANGE `isEmailVerified` `isEmailVerified` TINYINT(1) DEFAULT false;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Users` CHANGE `role` `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user';"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Users` CHANGE `createdAt` `createdAt` DATETIME NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Users` CHANGE `updatedAt` `updatedAt` DATETIME NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW FULL COLUMNS FROM `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Categories` CHANGE `name` `name` VARCHAR(255) NOT NULL UNIQUE;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Categories` CHANGE `createdAt` `createdAt` DATETIME NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Categories` CHANGE `updatedAt` `updatedAt` DATETIME NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW FULL COLUMNS FROM `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Products` CHANGE `image` `image` VARCHAR(255);"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Products` CHANGE `name` `name` VARCHAR(255) NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Products` CHANGE `description` `description` TEXT;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Products` CHANGE `price` `price` DECIMAL(10,2) NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Products` ADD FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Products` CHANGE `createdAt` `createdAt` DATETIME NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Products` CHANGE `updatedAt` `updatedAt` DATETIME NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW FULL COLUMNS FROM `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Blogs` CHANGE `image` `image` VARCHAR(255) NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Blogs` CHANGE `title` `title` VARCHAR(255) NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Blogs` CHANGE `description` `description` TEXT;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Blogs` CHANGE `createdAt` `createdAt` DATETIME NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Blogs` CHANGE `updatedAt` `updatedAt` DATETIME NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW FULL COLUMNS FROM `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Comments` CHANGE `first_name` `first_name` VARCHAR(255) NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Comments` CHANGE `last_name` `last_name` VARCHAR(255) NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Comments` ADD FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Comments` CHANGE `comment_des` `comment_des` VARCHAR(255) NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Comments` CHANGE `createdAt` `createdAt` DATETIME NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): ALTER TABLE `Comments` CHANGE `updatedAt` `updatedAt` DATETIME NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'mmarahman4847@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`verificationToken`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'mmarahman4847@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'mmarahman48471@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`verificationToken`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'mmarahman48471@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'mmarahman484712@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`verificationToken`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'mmarahman484712@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'mmarahman4842@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`verificationToken`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'pultozokku@gufum.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`verificationToken`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'pultozokku@gufum.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'firzasirza@gufum.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`verificationToken`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'mugnonefyu@gufum.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`verificationToken`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'mugnonesfyu@gufum.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`verificationToken`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'abdurrahmanx33@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`verificationToken`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `verificationToken` VARCHAR(255) NOT NULL, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"server","level":"info","message":"Server running on port 4000"}

{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"level":"info","message":"Database connection has been established successfully."}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Comments' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_FK_CANNOT_OPEN_PARENT","errno":1824,"sql":"CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Failed to open the referenced table 'blogs'","sqlState":"HY000"},"parameters":{},"parent":{"code":"ER_FK_CANNOT_OPEN_PARENT","errno":1824,"sql":"CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;","sqlMessage":"Failed to open the referenced table 'blogs'","sqlState":"HY000"},"sql":"CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `verificationToken` VARCHAR(255) NOT NULL, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `googleId` VARCHAR(255) UNIQUE, `facebookId` VARCHAR(255) UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `googleId`, `facebookId`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`verificationToken`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `googleId`, `facebookId`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`verificationToken`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `googleId`, `facebookId`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'admin@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `googleId`, `facebookId`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`verificationToken`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `googleId`, `facebookId`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `googleId`, `facebookId`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'nonexistent@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `googleId`, `facebookId`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`isEmailVerified`,`verificationToken`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `googleId`, `facebookId`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `googleId`, `facebookId`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'mmarahman4847@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`verificationToken`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `googleId`, `facebookId`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = '100';"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Users' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT 1+1 AS result"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"level":"info","message":"Database connection has been established successfully."}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Categories' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Products' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'Blogs' AND TABLE_SCHEMA = 'marketplace_test_db'"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"error":{"name":"SequelizeDatabaseError","original":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Blogs`","sqlMessage":"Table 'marketplace_test_db.blogs' doesn't exist","sqlState":"42S02"},"parameters":{},"parent":{"code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"SHOW INDEX FROM `Blogs`","sqlMessage":"Table 'marketplace_test_db.blogs' doesn't exist","sqlState":"42S02"},"sql":"SHOW INDEX FROM `Blogs`"},"level":"error","message":"There was an error in Sequelize"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Categories' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Products' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Blogs' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Comments' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='marketplace_test_db' AND REFERENCED_TABLE_NAME IS NOT NULL;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Users`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL UNIQUE, `password` VARCHAR(255) NOT NULL, `first_name` VARCHAR(255), `last_name` VARCHAR(255), `isEmailVerified` TINYINT(1) DEFAULT false, `verificationToken` VARCHAR(255) NOT NULL, `role` ENUM('user', 'admin') NOT NULL DEFAULT 'user', `googleId` VARCHAR(255) UNIQUE, `facebookId` VARCHAR(255) UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Categories`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Categories` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255) NOT NULL UNIQUE, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Categories`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Products`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Products` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255), `name` VARCHAR(255) NOT NULL, `description` TEXT, `price` DECIMAL(10,2) NOT NULL, `categoryId` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`categoryId`) REFERENCES `Categories` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Products`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Blogs`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER NOT NULL auto_increment , `image` VARCHAR(255) NOT NULL, `title` VARCHAR(255) NOT NULL, `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Blogs`"}
{"label":"sequelize","level":"info","message":"Executing (default): DROP TABLE IF EXISTS `Comments`;"}
{"label":"sequelize","level":"info","message":"Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER NOT NULL auto_increment , `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `BlogId` INTEGER, `comment_des` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`BlogId`) REFERENCES `Blogs` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;"}
{"label":"sequelize","level":"info","message":"Executing (default): SHOW INDEX FROM `Comments`"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `googleId`, `facebookId`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'abdurrahmanx33@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`verificationToken`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `googleId`, `facebookId`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'abdurrahmanx33@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`verificationToken`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `googleId`, `facebookId`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'abdurrahmanx33@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `googleId`, `facebookId`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`verificationToken`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `googleId`, `facebookId`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `googleId`, `facebookId`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'nonexistent@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `googleId`, `facebookId`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`isEmailVerified`,`verificationToken`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `googleId`, `facebookId`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'login@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `googleId`, `facebookId`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'mmarahman4847@gmail.com';"}
{"label":"sequelize","level":"info","message":"Executing (default): INSERT INTO `Users` (`id`,`email`,`password`,`first_name`,`last_name`,`isEmailVerified`,`verificationToken`,`role`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?);"}
{"label":"sequelize","level":"info","message":"Executing (default): DELETE FROM `Users`"}
{"label":"sequelize","level":"info","message":"Executing (default): SELECT `id`, `email`, `password`, `first_name`, `last_name`, `isEmailVerified`, `verificationToken`, `role`, `googleId`, `facebookId`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`id` = '100';"}
